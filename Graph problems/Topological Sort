Link to the problem:


https://practice.geeksforgeeks.org/problems/topological-sort/1#

This Implementation is based on the BFS approach using Kahn's Algorithm.


class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        int indegree[] = new int[V];
        for(ArrayList<Integer> list:adj){
            for(int i:list){
                indegree[i]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        int result[] = new int[V];
        addTopoInResult(adj,q,indegree,result);
        return result;
    }
    static void addTopoInResult(ArrayList<ArrayList<Integer>> adj,Queue<Integer> q,int[] indegree,int[] result){
        int c=0;
        while(!q.isEmpty()){
            int u = q.poll();
            result[c] = u;
            c++;
            for(int i:adj.get(u)){
                indegree[i]--;
                if(indegree[i]==0){
                    q.add(i);
                }
            }
        }
    }
}
